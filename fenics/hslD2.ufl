


element = FiniteElement("Lagrange", triangle, 1)
scalar = FiniteElement("Lagrange", interval, 1)

v       = TestFunction(element)  # Test Function
u       = TrialFunction(element) # Trial Function


vs       = TestFunction(element)  # Test Function
us       = TrialFunction(element) # Trial Function
u0 		= Coefficient(element)
n = FacetNormal(triangle)


u0 = Coefficient(element)
# g = Coefficient(element)

D11 = Coefficient(element)
D22 = Coefficient(element)
D12 = Coefficient(element)
D   = Constant(triangle)
dt  = Constant(triangle)
f   = Constant(triangle)

A = as_matrix([ [D*D11, D*D12], [D*D12, D*D22] ])

# F = u*v*dx + dt*dot(grad(u), grad(v))*dx - (u0 + dt*f)*v*dx

# No g function:
F = (u-u0)*v*dx - dt*f*v*dx + dt*dot(A*grad(u), grad(v))*dx 
# F = (u-u0)*v*dx - dt*f*v*dx + dt*dot(D*grad(u), grad(v))*dx 
 
# F = (u-u0)*v*dx - dt*(f*v*dx + g*v*ds) + dt*D*dot(grad(u), grad(v))*dx 


a, L = lhs(F), rhs(F)

# as1 = inner(us, vs)*ds 
# Ls1 = inner(dot(grad(u), n), vs)*ds
F2 = inner(us, vs)*ds - inner(dot(grad(u), n), vs)*ds

as1, Ls1 = lhs(F2), rhs(F2)

forms=[a, L, as1, Ls1]